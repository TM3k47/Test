############################################################..LISP..##############################################################

**....GPA Finder...**

gpa(era,3.80).
gpa(mira,3.45).
gpa(ashik,3.90).
gpa(nuri,4.00).
gpa(hi,2.22).
result:-
write('Enter Student Name:'),
read(Name),
gpa(Name,Y),
nl,
write('GPA is:'),
write(Y).

**..Fibonacci..**

fib(1,1).
fib(2,1).
fib(N,F):-
    N>2,
    N1 is N-1,
    N2 is N-2,
    fib(N1,F1),
    fib(N2,F2),
    F is F1+F2.

**..Factorial**

fact(0,1).
fact(N,F):-
    N>0,
    N1 is N-1,
    fact(N1,F1),
    F is N*F1.

**..GCD and LCM..**

% Base case: GCD of X and 0 is |X|
gcd(X, 0, D) :-
    D is abs(X).

% Recursive case
gcd(X, Y, D) :-
    Y \= 0,                % prevent division by zero
    R is X mod Y,
    gcd(Y, R, D).


%
lcm(X,Y,M):-
    gcd(X,Y,D),
    M is (X*Y)/D.

**..cyclic graph..**

edge(a, b).
edge(b, c).
edge(c, a).   % This creates a cycle
edge(c, d).
edge(d, e).

% Path finding with visited check
path(X, Y, Path) :-
    travel(X, Y, [X], Q),
    reverse(Q, Path).

travel(X, Y, Visited, [Y|Visited]) :-
    edge(X, Y).

travel(X, Y, Visited, Path) :-
    edge(X, Z),
    Z \== Y,
    \+ member(Z, Visited),
    travel(Z, Y, [Z|Visited], Path).

**..File Handling..**

% filehandling.pl

% Write data to a file
write_to_file(Filename, Data) :-
    open(Filename, write, Stream),
    write(Stream, Data),
    close(Stream).

% Read data from a file
read_from_file(Filename) :-
    open(Filename, read, Stream),
    read(Stream, Data),
    close(Stream),
    write(Data).

**..Maximum and Minimum ..**

max(X, Y, X) :- X >= Y.
max(X, Y, Y) :- Y > X.

**..Siblings ..**

Family Relationship Program
female(amy).
female(johnette).
male(anthony).
male(bruce).
male(ogden).

parentof(amy,johnette).
parentof(amy,anthony).
parentof(amy,bruce).
parentof(ogden,johnette).
parentof(ogden,anthony).
parentof(ogden,bruce).

siblingof(X,Y) :- parentof(Z,X), parentof(Z,Y).
brotherof(X,Y) :- parentof(Z,X), male(X), parentof(Z,Y).

**..List Iteam ..**

item(tshirt).
item(pant).
item(caps).
item(shirt).
item(shoe).
item(sunglass).

products :- item(X), write(X), nl, fail.

**.. Student Teacher Relation..**

studies(tamanna,cse421).
studies(tirana,cse421).
studies(sayem,cse422).
studies(tamanna,cse452).
studies(tamanna,cse423).

teaches(selim_sir,cse452).
teaches(mijan_sir,cse421).
teaches(ujjal_sir,cse423).

professor(X,Y):- teaches(X,Z), studies(Y,Z).

**..Cube..**
cube:-write('Enter The Number:'),
read(X),
    nl,
    N is X*X*X,
    write('Result is:'),
    write(N).

** List of Goals..**

big(bear). big(elephant).
small(cat). small(dog).
brown(bear).
black(cat). black(dog).
gray(elephant).

dark(Z) :- black(Z).
dark(Z) :- brown(Z).
dark(Z) :- gray(Z).












#############################################################  CLIPS  ###############################################################

***..List Manipulation..**

;;; ===========================
;;; Basic List Manipulation Demo
;;; ===========================

;; Create a list
(setq mylist '(a b c d e))

(format t "Original list: ~a~%" mylist)

;; Access elements
(format t "First element: ~a~%" (car mylist))
(format t "Rest of the list: ~a~%" (cdr mylist))
(format t "Last element: ~a~%" (car (last mylist)))
(format t "Length of list: ~a~%" (length mylist))
(format t "3rd element: ~a~%" (nth 2 mylist))

;; Add elements
(setq mylist (append mylist '(f)))
(format t "After append 'F': ~a~%" mylist)

(setq mylist (cons 'z mylist))
(format t "After cons 'Z': ~a~%" mylist)

;; Remove elements
(setq mylist (remove 'C mylist))
(format t "After removing 'C': ~a~%" mylist)

;; Check membership
(format t "Is 'D' in the list? ~a~%" (member 'D mylist))
(format t "Is 'X' in the list? ~a~%" (member 'X mylist))

;; Reverse the list
(format t "Reversed list: ~a~%" (reverse mylist))


**..Circle..*****

;;circle area program in CLISP

(format t "Enter the radius of the circle: ")
(setq radius (read)) ; read the radius from user input
(setq pi 3.14159) ; define the value of pi
(setq area (* pi radius radius)) ; calculate the area of the circle
(format t "The area of the circle with radius ~a is ~a~%" radius area) ; display the result

*** Triangle ..**

;; area of triangle using clisp

(format t "Enter a value :") ; enter the value of a
(setq a (read)) ; reading the value

(format t "Enter b value :") ; enter the value of a
(setq b (read)) ; reading the value

(format t "Enter c value :") ; enter the value of a
(setq c (read)) ; reading the value

;set the semiperametre S
(setq S (/(+ a b c) 2.0))

(setq area (sqrt(* S (- S a) (- S b) (- S c))))

(format t "The area of triangle is ~a"area)


############################################

(princ "Enter the base of the triangle: ")
(setq base (read))

(princ "Enter the height of the triangle: ")
(setq height (read))

(setq area (* 0.5 base height))

(format t "Area of the triangle: ~a~%" area)

***... Factorial..**

(defun factorial (n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(format t "Factorial is: ~a~%" (factorial 5))

**...Fibonacci...***

;; Iterative Fibonacci function
(defun fib-iter (n)
  (let ((a 0) (b 1) (i 0) result)
    (if (= n 0) 0
        (progn
          (dotimes (i (- n 1))
            (setf result (+ a b))
            (setf a b)
            (setf b result))
          b))))

;; Example: print first 10 Fibonacci numbers
(dotimes (i 10)
  (format t "~a " (fib-iter i)))  ;; print each number followed by a space

*****...Max Min...********

;;; Max function
(defun my-max (lst)
  (if (null (cdr lst))
      (car lst)
      (let ((max-rest (my-max (cdr lst))))
        (if (> (car lst) max-rest)
            (car lst)
            max-rest))))

;;; Min function
(defun my-min (lst)
  (if (null (cdr lst))
      (car lst)
      (let ((min-rest (my-min (cdr lst))))
        (if (< (car lst) min-rest)
            (car lst)
            min-rest))))

;; Example list
(setq numbers '(5 2 9 1 7 3))

;; Print max and min
(format t "List: ~a~%" numbers)
(format t "Maximum: ~a~%" (my-max numbers))
(format t "Minimum: ~a~%" (my-min numbers))


***...Array Access*...*

;; create a large array 
(setq mx_size 100)
(setq arr (make-array mx_size))
(setq current_size 0)

(loop 
    (format t "(1) Insert Value ~%(2) Update Value ~%(3) Delete Value ~%(4) Display Array ~%(5) Exit ~%Enter Your Choice(1-5) :")
    (setq choice (read))
    (cond
        ((= choice 1)
            (if (< current_size 100)
                (progn
                    (format t "Enter the value to insert : ")
                    (setf (aref arr current_size) (read))
                    (incf current_size)
                    (format t "Value inserted !~%")
                )
                (format t "Array is full !!~%")
            )
        )
        ((= choice 2)
            (if (> current_size 0)
                (progn
                    (format t "Array elements are : ~%")
                    (loop for indx from 0 below current_size do
                        (format t "~a (ind=~a)~%"(aref arr indx) indx)
                    )
                    (format t "Which Element Do You Want To Update ? ~%")
                    (format t "Enter it's indx value : ")
                    (setq i (read))
                    (format t "Enter the updated value : ")
                    (setf (aref arr i) (read))
                    (format t "Value is updated ! ~%")
                    (loop for indx from 0 below current_size do
                        (format t "~a (ind=~a)~%"(aref arr indx) indx)
                    )
                )
                (format t "Array is empty~%")
            )
        )
        ((= choice 3)
            (if (> current_size 0)
                (progn
                    (format t "Array elements are : ~%")
                    (loop for indx from 0 below current_size do
                        (format t "~a (ind=~a)~%"(aref arr indx) indx)
                    )
                    (format t "Which Element Do You Want To Delete ? ~%")
                    (format t "Enter it's indx value : ")
                    (setq i (read))
                    (loop for indx from i below current_size do
                        (setf (aref arr i) (aref arr (+ i 1)))
                    )
                    (format t "Value is deleted ! ~%")
                    (decf current_size)
                    (loop for indx from 0 below current_size do
                        (format t "~a (ind=~a)~%"(aref arr indx) indx)
                    )
                )
                (format t "Array is empty~%")
            )
        )
        ((= choice 4)
            (if (> current_size 0)
                (progn
                    (format t "The Element of the array : ")
                    (loop for indx from 0 below current_size do 
                        (format t "~a " (aref arr indx))
                    )
                    (format t "~%")
                )
                (format t "Array is empty!~% ~%")
            )
        )
        ((= choice 5)
            (return)
        )
    )
)



****.....Average.....****
(defun average ()
  (princ "Enter the number of elements: ")
  (setq n (read))          ; read how many numbers
  (setq sum 0)             ; initialize sum
  
  ;; loop to read n numbers and calculate sum
  (dotimes (i n)
    (princ "Enter number: ")
    (setq num (read))
    (setq sum (+ sum num)))
  
  ;; calculate and display average
  (setq avg (/ (float sum) n))
  (format t "The average is: ~a~%" avg)
)


*********...........Putprop...........********

;; Example: Store and retrieve properties of a student
(defun student-demo ()
  ;; Assign properties using putprop
  (putprop 'student "Umme Jami" 'name)
  (putprop 'student 24 'age)
  (putprop 'student "Computer Science" 'department)

  ;; Retrieve values with get
  (format t "Student Name: ~a~%" (get 'student 'name))
  (format t "Age: ~a~%" (get 'student 'age))
  (format t "Department: ~a~%" (get 'student 'department))
)


